{"version":3,"sources":["components/Cart/Cart.module.scss","App.module.scss","components/Cart/CartProduct/CartProduct.module.scss","components/Cart/CartForm/CartForm.module.scss","serviceWorker.ts","redux/hooks.ts","components/Cart/CartApi.ts","components/Cart/cartActions.ts","components/Cart/cartSlice.ts","components/Cart/CartProduct/CartProduct.tsx","components/Cart/CartForm/CarForm.tsx","components/Cart/Cart.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","useAppDispatch","useDispatch","useAppSelector","useSelector","fetchProducts","fetch","getAsyncProducts","createAsyncThunk","a","response","json","cartSlice","createSlice","name","initialState","products","status","reducers","addProduct","state","action","payload","incrementQuantity","id","num","forEach","product","quantity","totalPrice","Number","price","toFixed","decrementQuantity","deleteProduct","index","splice","extraReducers","builder","addCase","pending","fulfilled","cartSelector","cart","actions","CartProduct","title","dispatch","clsIncrementButton","classes","button","buttonNotActive","join","className","Product","quantityWrap","type","onClick","buttonRemove","CartForm","React","useState","setName","setPrice","isFormValid","setIsFormValid","isPriceValid","isNaN","onSubmit","e","preventDefault","inputWrap","input","placeholder","onChange","target","value","trim","error","Math","random","Cart","useEffect","CartWrap","map","productData","App","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,SAAW,uBAAuB,KAAO,qB,mBCA3DD,EAAOC,QAAU,CAAC,IAAM,mB,kBCAxBD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,MAAQ,2BAA2B,MAAQ,2BAA2B,SAAW,8BAA8B,aAAe,kCAAkC,OAAS,4BAA4B,gBAAkB,qCAAqC,aAAe,oC,uCCApUD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,MAAQ,wBAAwB,UAAY,4BAA4B,MAAQ,wBAAwB,OAAS,yBAAyB,MAAQ,0B,kFCWtLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCdOC,EAAiB,kBAAMC,eACvBC,EAAkDC,I,iDCChDC,EALO,WAErB,OADiBC,MAAM,8CCGlBC,EAAmBC,YAEvB,wBAFuC,sBAIvC,4BAAAC,EAAA,sEACyBJ,IADzB,cACQK,EADR,yBAGSA,EAASC,QAHlB,4C,QC0BIC,EAAYC,YAAY,CAC7BC,KAAM,OACNC,aAP+B,CAC/BC,SAAU,GACVC,OAAQ,WAMRC,SAAU,CAETC,WAAY,SAACC,EAAOC,GACnBD,EAAMJ,SAAN,CAAkBK,EAAOC,SAAzB,mBAAqCF,EAAMJ,YAG5CO,kBAAmB,SAACH,EAAOC,GAC1B,MAAoBA,EAAOC,QAAnBE,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,IACZL,EAAMJ,SAASU,SAAQ,SAAAC,GACjBA,EAAQH,KAAOA,IACnBG,EAAQC,UAAYH,EACpBE,EAAQE,WAAaC,QAAQH,EAAQI,MAAQJ,EAAQC,UAAUI,QAAQ,SAK1EC,kBAAmB,SAACb,EAAOC,GAC1B,MAAoBA,EAAOC,QAAnBE,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,IACZL,EAAMJ,SAASU,SAAQ,SAAAC,GACjBA,EAAQH,KAAOA,IACnBG,EAAQC,UAAYH,EACpBE,EAAQE,WAAaC,QAAQH,EAAQI,MAAQJ,EAAQC,UAAUI,QAAQ,SAK1EE,cAAe,SAACd,EAAOC,GACtB,IAAMG,EAAKH,EAAOC,QAClBF,EAAMJ,SAASU,SAAQ,SAACC,EAASQ,GAC3BR,EAAQH,KAAOA,GACnBJ,EAAMJ,SAASoB,OAAOD,EAAO,QAKjCE,cAAe,SAACC,GACfA,EAEEC,QAAQhC,EAAiBiC,SAAS,SAACpB,GACnCA,EAAMH,OAAS,aAGfsB,QAAQhC,EAAiBkC,WAAW,SAACrB,EAAMC,GACvCD,EAAMJ,SAAWK,EAAOC,QAC5BF,EAAMJ,SAASU,SAAQ,SAAAC,GACtBA,EAAQC,SAAW,EACnBD,EAAQE,WAAaF,EAAQC,SAAWD,EAAQI,SAEjDX,EAAMH,OAAS,aAKbyB,EAAe,SAACtB,GAAD,OAAsBA,EAAMuB,MAE1C,EAA4E/B,EAAUgC,QAA9EzB,EAAR,EAAQA,WAAYI,EAApB,EAAoBA,kBAAmBU,EAAvC,EAAuCA,kBAAmBC,EAA1D,EAA0DA,cAGlDtB,IAAf,Q,uBCdeiC,EArEK,SAAC,GAAsE,IAApEC,EAAmE,EAAnEA,MAAOf,EAA4D,EAA5DA,MAAOH,EAAqD,EAArDA,SAAUJ,EAA2C,EAA3CA,GAAIK,EAAuC,EAAvCA,WAC5CkB,EAAW9C,IAGX+C,EAAqB,CAC1BC,IAAQC,OACK,IAAbtB,EAAiBqB,IAAQE,gBAAkB,IAC1CC,KAAK,KA2BP,OACC,sBAAKC,UAAWJ,IAAQK,QAAxB,UACC,sBAAMD,UAAWJ,IAAQH,MAAzB,SAAkCA,IAClC,uBAAMO,UAAWJ,IAAQlB,MAAzB,UAAkCF,EAAlC,OAEA,sBAAKwB,UAAWJ,IAAQM,aAAxB,UACC,wBACCC,KAAK,SACLH,UAAWL,EACXS,QAzBgC,WAEjB,IAAb7B,GAELmB,EAASd,EAAkB,CAC1BR,IAAK,EACLD,GAAIA,EACJO,MAAOH,EAAWG,MAejB,eAOA,uBAAMsB,UAAWJ,IAAQrB,SAAzB,8BAA0DA,EAA1D,UACA,wBACC4B,KAAK,SACLH,UAAWJ,IAAQC,OACnBO,QAzCgC,WACnCV,EAAUxB,EAAkB,CAC3BE,IAAK,EACLD,GAAIA,EACJO,MAAOH,EAAWG,MAkCjB,kBAQD,wBACCyB,KAAK,SACLH,UAAWJ,IAAQS,aACnBD,QA7B8B,WAChCV,EAASb,EAAcV,KAyBtB,wB,uBCyBYmC,EAxFE,WAChB,IAAMZ,EAAW9C,IAEjB,EAAwB2D,IAAMC,SAAiB,IAA/C,mBAAO/C,EAAP,KAAagD,EAAb,KACA,EAA2BF,IAAMC,SAAiB,IAAlD,mBAAO9B,EAAP,KAAcgC,EAAd,KACA,EAAsCH,IAAMC,UAAkB,GAA9D,mBAAOG,EAAP,KAAoBC,EAApB,KACMC,GAAgBC,MAAMrC,OAAOC,IAgDnC,OACC,uBAAMsB,UAAWJ,IAAQU,SAAUS,SALd,SAACC,GACtBA,EAAEC,kBAIF,UACC,oBAAIjB,UAAWJ,IAAQH,MAAvB,6BACA,qBAAKO,UAAWJ,IAAQsB,UAAxB,SACC,uBACClB,UAAWJ,IAAQuB,MACnBhB,KAAK,OACLiB,YAAY,OACZC,SAtDsB,SAACL,GAE1BJ,GAAe,GAEfH,EAAQO,EAAEM,OAAOC,MAAMC,SAmDpBD,MAAO9D,MAGT,qBAAKuC,UAAWJ,IAAQsB,UAAxB,SACC,uBACClB,UAAWJ,IAAQuB,MACnBhB,KAAK,OACLiB,YAAY,QACZC,SAxDuB,SAACL,GAE3BJ,GAAe,GAEfF,EAASM,EAAEM,OAAOC,MAAMC,SAqDrBD,MAAO7C,MAIPiC,EAAkF,KAAnE,sBAAMX,UAAWJ,IAAQ6B,MAAzB,0JACjB,wBACCtB,KAAK,SACLH,UAAWJ,IAAQC,OACnBO,QA1DwB,WAI1BQ,EACCrE,QAAQkB,IAASlB,QAAQmC,IAAUmC,GAG9BpD,GAASiB,IAETmC,GAKNnB,EAAS5B,EAAW,CACnB2B,MAAOhC,EACPiB,MAAOD,OAAOC,GACdH,SAhBgB,EAiBhBJ,GAAIuD,KAAKC,SACTnD,WAlBgB,EAkBOC,OAAOC,MAG/B+B,EAAQ,IACRC,EAAS,KAbRA,EAAS,MA4CT,qBCjDYkB,EAxBF,WACZ,MAA6B9E,EAAeuC,GAApC1B,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OACZ8B,EAAW9C,IAOjB,OALA2D,IAAMsB,WAAU,WACfnC,EAASxC,OAER,IAGD,sBAAK8C,UAAWJ,IAAQkC,SAAxB,UACC,sBAAK9B,UAAWJ,IAAQgC,KAAxB,UACC,sCACa,SAAXhE,EAEAD,EAASoE,KAAI,SAAAC,GAAW,OAAI,cAAC,EAAD,eAAsCA,GAApBA,EAAY7D,OACzD,2BAGJ,cAAC,EAAD,Q,iBChBY8D,MARf,WACE,OACE,qBAAKjC,UAAWJ,IAAQqC,IAAxB,SACE,cAAC,EAAD,OCUSC,EAfDC,YAAe,CAC3BC,QAAS,CACT9C,KAAM/B,K,MCKR8E,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,SVwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACvB,GACNwB,QAAQxB,MAAMA,EAAMyB,c","file":"static/js/main.4f27163d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CartWrap\":\"Cart_CartWrap__8eTss\",\"Cart\":\"Cart_Cart__2p8O0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__wrSSE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Product\":\"CartProduct_Product__a85zD\",\"title\":\"CartProduct_title__Feg2R\",\"price\":\"CartProduct_price__Zb1Cb\",\"quantity\":\"CartProduct_quantity__3mLjv\",\"quantityWrap\":\"CartProduct_quantityWrap__21Zh2\",\"button\":\"CartProduct_button__Xt1AQ\",\"buttonNotActive\":\"CartProduct_buttonNotActive__3KTwJ\",\"buttonRemove\":\"CartProduct_buttonRemove__uXpnr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CartForm\":\"CartForm_CartForm__3V5T-\",\"title\":\"CartForm_title__Xabog\",\"inputWrap\":\"CartForm_inputWrap__V7w-d\",\"input\":\"CartForm_input__mpeFR\",\"button\":\"CartForm_button__eRwwT\",\"error\":\"CartForm_error__3_Q3J\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","// fetch products from fakestoreapi.com\nconst fetchProducts = () => {\n\tconst response = fetch('https://fakestoreapi.com/products?limit=2');\n\treturn response;\n}\n\nexport default fetchProducts;","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport fetchProducts from './CartApi';\n\n\n// async action for get products\nconst getAsyncProducts = createAsyncThunk(\n  // type of action\n  'cart/getAsyncProducts',\n  // function for return payload(products)\n  async () => {\n    const response = await fetchProducts();\n    // The value we return becomes the `fulfilled` action payload\n    return response.json();\n  }\n);\n\nexport { getAsyncProducts };","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../redux/store';\nimport { getAsyncProducts } from './cartActions';\n\nexport interface CartState {\n\tstatus: 'idle' | 'loading',\n  products: {\n\t\ttitle: string,\n\t\tprice: number,\n\t\tquantity: number,\n\t\tid: number,\n\t\ttotalPrice: number,\n\t\t\n\t}[]\n}\n\ntype ProductPayload = {\n\tid: number,\n\ttitle: string,\n\tprice: number,\n\tquantity: number,\n\ttotalPrice: number\n}\n\ntype IncrementPayload = {\n\tid: number,\n\tnum: number,\n\tprice: number\n}\n\nconst initialState: CartState = {\n\tproducts: [],\n\tstatus: 'loading'\n};\n\nconst cartSlice = createSlice({\n\tname: 'cart',\n\tinitialState,\n\treducers: {\n\t\t// action for add product by use form\n\t\taddProduct: (state, action: PayloadAction<ProductPayload>) =>{\n\t\t\tstate.products = [action.payload, ...state.products];\n\t\t},\n\t\t// increment quantity of product by click on increment button\n\t\tincrementQuantity: (state, action: PayloadAction<IncrementPayload>) => {\n\t\t\tconst { id, num } = action.payload;\n\t\t\tstate.products.forEach(product => {\n\t\t\t\tif ( product.id === id ) {\n\t\t\t\t\tproduct.quantity += num;\n\t\t\t\t\tproduct.totalPrice = Number((product.price * product.quantity).toFixed(2));\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\t// the same action as one above, only for click decrement button\n\t\tdecrementQuantity: (state, action: PayloadAction<IncrementPayload>) => {\n\t\t\tconst { id, num } = action.payload;\n\t\t\tstate.products.forEach(product => {\n\t\t\t\tif ( product.id === id ) {\n\t\t\t\t\tproduct.quantity -= num;\n\t\t\t\t\tproduct.totalPrice = Number((product.price * product.quantity).toFixed(2));\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\t// action for delete product from cart by click remove button at CartProduct component\n\t\tdeleteProduct: (state, action: PayloadAction<number>) => {\n\t\t\tconst id = action.payload;\n\t\t\tstate.products.forEach((product, index) => {\n\t\t\t\tif ( product.id === id ) {\n\t\t\t\t\tstate.products.splice(index, 1)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t// set loading status when fetching products from fake store api\n\t\t\t.addCase(getAsyncProducts.pending, (state) => {\n\t\t\t\tstate.status = 'loading';\n      })\n\t\t\t// set products at state\n\t\t\t.addCase(getAsyncProducts.fulfilled, (state,action) => {\n        state.products = action.payload;\n\t\t\t\tstate.products.forEach(product => {\n\t\t\t\t\tproduct.quantity = 1;\n\t\t\t\t\tproduct.totalPrice = product.quantity * product.price;\n\t\t\t\t})\n\t\t\t\tstate.status = 'idle';\n      })\n\t}\n});\n\nconst cartSelector = (state: RootState) => state.cart;\n\nexport const { addProduct, incrementQuantity, decrementQuantity, deleteProduct } = cartSlice.actions\nexport { cartSelector };\n\nexport default cartSlice.reducer;","import { useAppDispatch } from '../../../redux/hooks';\nimport { decrementQuantity, deleteProduct, incrementQuantity } from '../cartSlice';\n\nimport classes from './CartProduct.module.scss';\n\ntype CartProductTypeProps = {\n\ttitle: string,\n\tprice: number,\n\tquantity: number;\n\tid: number;\n\ttotalPrice: number;\n}\n// component for render product\nconst CartProduct = ({ title, price, quantity, id, totalPrice }: CartProductTypeProps) => {\n\tconst dispatch = useAppDispatch();\n\t// changed styles for button decrement depending on quantity\n\t// If quantity is equal to 1 - set class buttonNotActive\n\tconst clsIncrementButton = [\n\t\tclasses.button,\n\t\tquantity === 1 ? classes.buttonNotActive : ''\n\t].join(' ');\n\n\t// dispatch the action that increment quantity\n\tconst handlerButtonIncrementClick = () => {\n\t\tdispatch( incrementQuantity({\n\t\t\tnum: 1,\n\t\t\tid: id,\n\t\t\tprice: quantity * price\n\t\t}))\n\t}\n\t// dispatch the action that decrement quantity\n\tconst handlerButtonDecrementClick = () => {\n\t\t// if quantity is equal to 1 - stop decrement\n\t\tif ( quantity === 1 ) return;\n\n\t\tdispatch(decrementQuantity({\n\t\t\tnum: 1,\n\t\t\tid: id,\n\t\t\tprice: quantity * price\n\t\t}))\n\t}\n\n\t// remove product by click on remove button\n\tconst handlerButtonRemoveClick = () => {\n\t\tdispatch(deleteProduct(id));\n\t}\n\n\treturn (\n\t\t<div className={classes.Product}>\n\t\t\t<span className={classes.title}>{ title }</span>\n\t\t\t<span className={classes.price}>{ totalPrice }$</span>\n\n\t\t\t<div className={classes.quantityWrap}>\n\t\t\t\t<button \n\t\t\t\t\ttype=\"button\" \n\t\t\t\t\tclassName={clsIncrementButton} \n\t\t\t\t\tonClick={handlerButtonDecrementClick}\n\t\t\t\t>\n\t\t\t\t\t-\n\t\t\t\t</button>\n\t\t\t\t<span className={classes.quantity}>&nbsp;Quantity:&nbsp;{ quantity }&nbsp;</span>\n\t\t\t\t<button \n\t\t\t\t\ttype=\"button\" \n\t\t\t\t\tclassName={classes.button} \n\t\t\t\t\tonClick={handlerButtonIncrementClick}\n\t\t\t\t>\n\t\t\t\t\t+\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<button \n\t\t\t\ttype=\"button\" \n\t\t\t\tclassName={classes.buttonRemove}\n\t\t\t\tonClick={handlerButtonRemoveClick}\n\t\t\t>\n\t\t\t\tRemove\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport type { CartProductTypeProps };\n\nexport default CartProduct;","import React from 'react';\nimport { useAppDispatch } from '../../../redux/hooks';\nimport { addProduct } from '../cartSlice';\nimport classes from './CartForm.module.scss';\n\n// component for adding product\nconst CartForm = () => {\n\tconst dispatch = useAppDispatch();\n\t// set local state for name and price\n\tconst [name, setName] = React.useState<string>('');\n\tconst [price, setPrice]  = React.useState<string>('');\n\tconst [isFormValid, setIsFormValid] = React.useState<boolean>(true);\n\tconst isPriceValid = !isNaN(Number(price));\n\n\tconst handlerChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t// unmount error message from form\n\t\tsetIsFormValid(true);\n\t\t// added change local name state\n\t\tsetName(e.target.value.trim());\n\t}\n\n\tconst handlerChangePrice = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t// unmount error message from form\n\t\tsetIsFormValid(true);\n\t\t// added change local price state\n\t\tsetPrice(e.target.value.trim());\n\t}\n\n\tconst handlerClickButton = () => {\n\t\t// added quantity for product, not handled at form\n\t\tconst quantity = 1;\n\t\t// check form validation and set local isFormValid state\n\t\tsetIsFormValid(\n\t\t\tBoolean(name) && Boolean(price) && isPriceValid\n\t\t)\n\t\t// check empty field and stop to execute the handler, if one is empty at least\n\t\tif ( !name || !price ) return;\n\t\t// clear price field and stop to execute handler, if price is NaN\n\t\tif ( !isPriceValid ) {\n\t\t\tsetPrice('');\n\t\t\treturn;\n\t\t};\n\t\t// else everything is ok, add the product\n\t\tdispatch(addProduct({\n\t\t\ttitle: name,\n\t\t\tprice: Number(price),\n\t\t\tquantity,\n\t\t\tid: Math.random(),\n\t\t\ttotalPrice: quantity * Number(price)\n\t\t}))\n\n\t\tsetName('');\n\t\tsetPrice('');\n\n\t}\n\t// prevent submit form\n\tconst handlerSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault();\n\t}\n\n\treturn (\n\t\t<form className={classes.CartForm} onSubmit={handlerSubmit}>\n\t\t\t<h2 className={classes.title}>Add the product</h2>\n\t\t\t<div className={classes.inputWrap}>\n\t\t\t\t<input \n\t\t\t\t\tclassName={classes.input} \n\t\t\t\t\ttype=\"text\" \n\t\t\t\t\tplaceholder=\"Name\"\n\t\t\t\t\tonChange={handlerChangeName}\n\t\t\t\t\tvalue={name}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className={classes.inputWrap}>\n\t\t\t\t<input \n\t\t\t\t\tclassName={classes.input} \n\t\t\t\t\ttype=\"text\" \n\t\t\t\t\tplaceholder=\"Price\"\n\t\t\t\t\tonChange={handlerChangePrice}\n\t\t\t\t\tvalue={price}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t{/* render error, if is form not a valid, else render nothing */}\n\t\t\t{!isFormValid ?  <span className={classes.error}>введите корректные данные</span> : null}\n\t\t\t<button \n\t\t\t\ttype=\"submit\" \n\t\t\t\tclassName={classes.button}\n\t\t\t\tonClick={handlerClickButton}\n\t\t\t>\n\t\t\t\tAdd\n\t\t\t</button>\n\t\t</form>\n\t)\n}\n\nexport default CartForm;","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\nimport classes from './Cart.module.scss';\nimport { getAsyncProducts } from './cartActions';\nimport { cartSelector } from './cartSlice';\nimport CartProduct from './CartProduct/CartProduct';\nimport CartForm from './CartForm/CarForm';\n\n\n// main component for all products and form\nconst Cart = ()=> {\n\tconst { products, status } = useAppSelector(cartSelector);\n\tconst dispatch = useAppDispatch();\n\n\tReact.useEffect(()=>{\n\t\tdispatch(getAsyncProducts())\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t},[])\n\n\treturn (\n\t\t<div className={classes.CartWrap}>\n\t\t\t<div className={classes.Cart}>\n\t\t\t\t<h1>Cart</h1>\n\t\t\t\t{ status === 'idle' \n\t\t\t\t\t? \n\t\t\t\t\t\tproducts.map(productData => <CartProduct key={productData.id} {...productData}/>) \n\t\t\t\t\t: \"Loading your goods...\"\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t<CartForm/>\n\t\t</div>\n\t)\n}\n\nexport default Cart;","import React from 'react';\nimport Cart from './components/Cart/Cart';\n\nimport classes from './App.module.scss';\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n      <Cart/> \n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport cartSlice from '../components/Cart/cartSlice';\n\nconst store = configureStore({\n  reducer: {\n\t\tcart: cartSlice\n\t},\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport store from './redux/store';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}